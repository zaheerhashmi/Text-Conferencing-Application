Section 2 Design:

- All clients are stored in a struct, which include the following fields.

struct registeredClients {
    char clientID[MAXBUFLEN]; // client ID
    char password[MAXBUFLEN]; // password
    int activeStatus; // Is logged in or not
    struct clientSessionID * sessionList; // list of sessions that the client is in.
    int portNumber; // client's port number (socket number)
    char clientIP[MAXBUFLEN]; // client's IP addres
};

=========================================================================================================================

1. Multiple Sessions Implementation

To implement multiple sessions, we use a linked list for each client to store the rooms
that the client is in. It takes O((number of users) * (number of rooms)) to send a message
to one room or multiple rooms.

For client who sends message to one specific room, we would need to check the rooms that each user is in and send the
message to a user if he or she is in the room.

For a client who sends message to all rooms, we would need to do the same thing but for multiple rooms.

We understand this is not the most efficient design, as if we stored every user in each 
room instead, sending message to one room would only take O(number of rooms). However,
we used this design because it makes it more straight forward for us to print
the rooms that each user is in, as shown below.

Here is a table of users and their sessions
        User -> harris , Session -> turtle,
        User -> zaheer, Session -> turtle, ice_cream

=========================================================================================================================

2. Invite Function

INVITE functionality has both server and client side functionality. 


The Invite Protocol: 
1) INVITE packet
    - Inviter sends packet
    - Data sent: <sessionID>,<guest> // guest is the name of the invitee
    - If sessionID is invalid or guest is already in sessionID, SEND_INVITE_NACK is sent (unacknowledged)
    - If guest does not exist or is inactive, SEND_INVITE_NACK is sent (unacknowledged).

2) INVITEE packet that is forwarded to the client
    - This packet forwards inviter's invite
    - Data sent: <inviter>,<sessionID>,<userID>

3) IN_ACK packet
    - If invitee accepts invite, forward IN_ACK packet to server. 
    - Invitee also joins sessionID sent by the inviter.
    - Server then forwards this packet directly to the inviter.
    - Data sent: <inviter>,<sessionID>,<userID>

3) IN_NACK
    - If invitee rejects invite, server forwards IN_NACK packet to the server

    - Invalid sessionID

4) JN_INVITE_NACK 
     - IF Inviter left session after send invite to invitee,
join session should not enable invitee to join a non-existing session.
However, we want to tell the invitee the reason that he or she
is rejected for joining the session (because inviter has left the session
so your acceptance to join the room did not work)
    - Data sent: <sessionID>

Constraints:
    - Client can only invite clients to a session it is in by itself
    - Client cannot invite clients to a non-existing session.
    - Client cannot invite non-existing clients.

-------------------------------------------------------------------------------------------------------------------------
========================================= Specifics =====================================================================
-------------------------------------------------------------------------------------------------------------------------

    Inviter:
    /invite <sessionID> <guest> (INVITE PACKET : inviter -> server)
    

    ### ZAHEER ###
    Make sure guest active status is 1, make sure inviter is in sessionID (find portnumber of inviter, look_for_session_id).
    
    Server:
    Send invite to invitee (SEND TO INVITEE PACKET: server -> invitee)
    /send_invite_to_invitee <sessionID>,<inviter>

    Invite handler function done.

    ### HARRIS ####
    If we received SEND TO INVITEE packet in the receive thread,
    we assign recv_invite = True. This would notify the main thread
    to answer a yes or no to the invite. Once the main thread answers to yes or no,
    we notify the recv thread that an answer has been given. 
    
    Note: While we are deciding if we answer yes or no,
    we would also need to sleep the receive thread, and hold a queue to process tasks
    (we already have this (select statement). Just add a lock to ensure synchronization.)
    Once main thread answers yes or no, we wakeup receive thread and send 
    IN_ACK or IN_NACK right away in handle_return message. (INVITEE TO SERVER PACKET: invitee -> server)

    Things that I want to Test:
    - IN_ACK and IN_NACK packet gets sent correctly.
    - How does the client receive messages after he or she answers yes or no? Is there an
    uncomfortable dump of information? Or is the information tolerable?

    If IN_ACK:
    call /joinsession <sessionID> in handle_return_message
    If IN_NACK:
    We don't do anything
    
    ### ZAHEER ###
    for BOTH_CASES;
    Server forwards
    IN_ACK or IN_NACK to inviter.

    4 packets in total.


======================================================== TIMEOUT =============================================================================
3. Timeout Function

Our team implementated the timeout function on the client side.
If the client is inactive for 5 minutes, we will close the socket from the
client side. The server will notice that the client has hanged,
and takes steps to logout the client and force it to leave any of the rooms
he or she is in.


===================================================== ADDITIONAL FEATURES ===================================================================================================
4. Message Choosing Function

Client may choose to message a specific subset of rooms that they are in.
With the send command:

    /send <SessionID1, SessionID2, SessionID3> <message>

Constraints:
- You have to be in a room(s) to send message to the rooms.
- You cannot send the character "|" in your message because the server receives the data like this: 
    <SessionID1, SessionID2, ...>|<message> 

We use "|" as a separator for the data field in our packet from client to server, so including "|" in the message
will mess up the processing of the message on the server side and thus, 
mess up the message once it gets sent back to client(s). I know, boolean algebra nerds might not like this,
but Computer Networks doesn't care about boolean algebra :)))) Also, this is not a regex course.

5. Chat History Function

For any of the rooms that the client is in, he or she can request for the chat history from there.
With the history command:

    /history <SessionID>

The history for a room is also sent to the client and downloaded when the client leaves that room.
When the client logs out, session histories for all rooms are sent to the client and downloaded.
If a room has no clients in it, its session history will be removed from the server.

The client will see it in the command prompt in this format:

This is the chat history ->
===================== 2021-04-02 21:18:45
. Room: turtle ===========================

harris -> hi!
zaheer -> what's up?
prof -> Hey you two! Stop chitchatting or I'll smack you with an apple.

The client will also be able to see the time that he or she has retrieved the chat history

Constraints:
- You cannot check the chat history of a room that you are not in.
- You cannot check the chat history of a room that doesn't exist.




    





